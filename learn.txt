'use client'

import { useState } from 'react'
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Label } from "@/components/ui/label"

interface Music {
  name: string
  artist: string
  timestamp: string
}

interface TimeRange {
  start: string
  end: string
}

function formatTime(seconds: number): string {
  const minutes = Math.floor(seconds / 60)
  const remainingSeconds = seconds % 60
  return `${minutes}:${remainingSeconds.toString().padStart(2, '0')}`
}

export default function YoutubeMusicFinder() {
  const [url, setUrl] = useState('')
  const [timeRange, setTimeRange] = useState<TimeRange>({ start: '', end: '' })
  const [music, setMusic] = useState<Music[]>([])
  const [error, setError] = useState('')

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault()
    setError('')

    // In a real application, you would make an API call here
    // For this example, we'll simulate a response
    if (url.includes('youtube.com') || url.includes('youtu.be')) {
      // Simulate finding music within the specified time range
      const start = timeRange.start ? parseFloat(timeRange.start) * 60 : 0
      const end = timeRange.end ? parseFloat(timeRange.end) * 60 : 1200 // Default to 20 minutes if not specified

      setMusic([
        { name: "Never Gonna Give You Up", artist: "Rick Astley", timestamp: formatTime(start + 30) },
        { name: "Despacito", artist: "Luis Fonsi & Daddy Yankee", timestamp: formatTime(start + 120) },
        { name: "Shape of You", artist: "Ed Sheeran", timestamp: formatTime(start + 210) },
      ].filter(track => {
        const trackTime = parseInt(track.timestamp.split(':')[0]) * 60 + parseInt(track.timestamp.split(':')[1])
        return trackTime >= start && trackTime <= end
      }))
    } else {
      setError('Please enter a valid YouTube URL')
      setMusic([])
    }
  }

  return (
    <div className="container mx-auto p-4">
      <Card className="w-full max-w-2xl mx-auto">
        <CardHeader>
          <CardTitle>YouTube Music Finder</CardTitle>
        </CardHeader>
        <CardContent>
          <form onSubmit={handleSubmit} className="space-y-4">
            <div>
              <Label htmlFor="url">YouTube URL</Label>
              <Input
                id="url"
                type="url"
                placeholder="Paste YouTube URL here"
                value={url}
                onChange={(e) => setUrl(e.target.value)}
                required
              />
            </div>
            <div className="flex space-x-4">
              <div className="flex-1">
                <Label htmlFor="start">Start Time (minutes)</Label>
                <Input
                  id="start"
                  type="number"
                  min="0"
                  step="0.1"
                  placeholder="e.g., 5.5"
                  value={timeRange.start}
                  onChange={(e) => setTimeRange(prev => ({ ...prev, start: e.target.value }))}
                />
              </div>
              <div className="flex-1">
                <Label htmlFor="end">End Time (minutes)</Label>
                <Input
                  id="end"
                  type="number"
                  min="0"
                  step="0.1"
                  placeholder="e.g., 10.5"
                  value={timeRange.end}
                  onChange={(e) => setTimeRange(prev => ({ ...prev, end: e.target.value }))}
                />
              </div>
            </div>
            <Button type="submit" className="w-full">Find Music</Button>
          </form>

          {error && <p className="text-red-500 mt-4">{error}</p>}

          {music.length > 0 && (
            <div className="mt-6">
              <h2 className="text-xl font-semibold mb-2">Music in this video:</h2>
              <ul className="space-y-2">
                {music.map((track, index) => (
                  <li key={index} className="bg-gray-100 p-2 rounded">
                    <span className="font-medium">{track.name}</span> by {track.artist}
                    <span className="ml-2 text-sm text-gray-500">at {track.timestamp}</span>
                  </li>
                ))}
              </ul>
            </div>
          )}
        </CardContent>
      </Card>
    </div>
  )
}

